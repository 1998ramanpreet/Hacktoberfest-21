/*Problem Statement: Min Steps to one
Problem Description:
Given a positive integer 'n',  find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - ­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).

Write brute-force recursive solution for this.
Input format :
The first and the only line of input contains an integer value, 'n'.

Output format :
Print the minimum number of steps.

Constraints :
1 <= n <= 200

Time Limit: 1 sec

Sample Input  1 :
4

Sample Output  1 :
2

Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1

Sample Input  2 :
7

Sample Output  2 :
3

Explanation of Sample Output 2 :
For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1

*/

//<----------------SOLUTION----------------->

//Brute Force Approach

#include <bits/stdc++.h>
using namespace std;

int minSteps(int n){
    //Base Case
    if(n<=1){
        return 0;
    }
    //Recursive Call
    int x=minSteps(n-1);
    int y=INT_MAX,z=INT_MAX;
    if(n%2==0){
        y=minSteps(n/2);
    }
    if(n%3==0){
        z=minSteps(n/3);
    }
    //Small Calculations
    int ans=min(x,min(y,z))+1;
    return ans;
}

//<-------------------------------------->
//Top-Down Approach with Memoization

int minSteps_helper(int n,int *arr){
    //Base Case
    if(n<=1){
        return 0;
    }

    if(arr[n]!=-1){
        return arr[n];
    }

    //Recursive Call
    int x=minSteps_helper(n-1,arr);
    int y=INT_MAX,z=INT_MAX;
    if(n%2==0){
        y=minSteps_helper(n/2,arr);
    }
    if(n%3==0){
        z=minSteps_helper(n/3,arr);
    }
    //Small Calculations
    arr[n]=min(x,min(y,z))+1;
    return arr[n];
}

//For User
int minSteps(int n){
    int *arr=new int[n+1];
    for(int i=0;i<=n;i++){
        arr[i]=-1;
    }
    return minSteps_helper(n,arr);
}

//<-------------------------------------->
//Bottom-Up Approach

int minSteps3(int n){
    int *arr=new int[n+1];
    for(int i=0;i<=n;i++){
        arr[i]=0;
    }
    arr[0]=0;
    arr[1]=0;
    for(int i=2;i<=n;i++){
        int x=INT_MAX,y=INT_MAX,z=INT_MAX;
        if(i%2==0){
            x=arr[i/2];
        }
        if(i%3==0){
            y=arr[i/3];
        }
        z=arr[i-1] ;
        arr[i]=1+min(x,min(y,z));
    }
    return arr[n];
}
